service: serverless-sample

provider:
  name: aws
  runtime: nodejs8.10
  stage: demo
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "apigateway:GET"
      Resource:
        - "arn:aws:apigateway:${self:provider.region}::/restapis*"

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  # - serverless-aws-documentation
  # - serverless-domain-manager
  - serverless-stack-output

package:
  include:
    src/**/!(*.spec).js
  exclude:
    - node_modules/**/*
    - test/**/*

functions:
  authorize:
    handler: src/auth/auth.authorize
    cors: true
  registerUser:
    handler: src/auth/auth.register
    description: Register a new User.
    environment:
    events:
      - http:
          path: auth/register
          method: post
          cors: true
          documentation:
            summary: Register a new user.
            tags:
              - Auth
            description: Returns the new user.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": RegisterOutput
              - ${file(./swagger/error-responses/bad-request.yml)}
              - ${file(./swagger/error-responses/forbidden.yml)}
              - ${file(./swagger/error-responses/not-found.yml)}
              - ${file(./swagger/error-responses/internal-server-error.yml)}
  loginUser:
    handler: src/auth/auth.login
    description: Login user and generate jwt token.
    environment:
    events:
      - http:
          path: auth/login
          method: post
          cors: true
          documentation:
            summary: Login user and generate jwt token.
            tags:
              - Auth
            description: Returns a token.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": UserData
              - ${file(./swagger/error-responses/bad-request.yml)}
              - ${file(./swagger/error-responses/forbidden.yml)}
              - ${file(./swagger/error-responses/not-found.yml)}
              - ${file(./swagger/error-responses/internal-server-error.yml)}
  getUserProfile:
    handler: src/users/user.getProfile
    description: Get User Profile
    environment:
    events:
      - http:
          path: users/profile
          method: get
          cors: true
          authorizer: authorize
          documentation:
            summary: Get User Profile
            tags:
              - User
            description: Returns a user profile.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": UserData
              - ${file(./swagger/error-responses/bad-request.yml)}
              - ${file(./swagger/error-responses/forbidden.yml)}
              - ${file(./swagger/error-responses/not-found.yml)}
              - ${file(./swagger/error-responses/internal-server-error.yml)}
custom:
  documentation: ${file(./swagger/documentation.yml)}
  # customDomain:
  #   basePath: "api"
  #   domainName: <your domain>
  #   certificateName: <your domain>
  #   stage: ${self:provider.stage}
  #   createRoute53Record: true
  output:
    file: .serverless/output.json
